#!/usr/bin/env ruby

require 'dotenv'
require 'json'
require 'net/http'

# settings

replica_lower = 0


# ready, set, go...

elasticsearch = Net::HTTP.new ARGV[0] || 'localhost', ARGV[1] || 9200


# node discovery
# we should figure out which nodes are going down

req_nodes = elasticsearch.start do | http |
  http.get "/_cluster/nodes", { 'Content-Type' => 'application/json' }
end

nodes = JSON.parse(req_nodes.body)

elastic_nodes = {}
permanent_nodes = {}

puts ' + discovering nodes...'

nodes['nodes'].each do | id, node |
  ip = node['transport_address'].gsub(/inet\[\/([^:]+):\d+\]/, '\1')

  if node['attributes'].has_key? 'logsearch' then
    if 'fulltime_zone1' == node['attributes']['logsearch'] then
      puts " - node #{id} (#{ip}) will be terminated"
      elastic_nodes[id] = ip
    else
      permanent_nodes[id] = ip
    end
  end
end

puts ' - discovered nodes'


# relocate shards
# @todo? to be safe, manually move primary shards off elastic nodes

puts ' - reviewing allocations...'

req_state = elasticsearch.start do | http |
  http.get '/_cluster/state?filter_nodes&filter_metadata&filter_blocks&filter_indices', { 'Content-Type' => 'application/json' }
end

state = JSON.parse(req_state.body)

elastic_nodes.each do | id, ip |
  state['routing_nodes']['nodes'][id].each | shard |
    if shard['primary'] then
      puts ' - node #{id} (#{ip}) has a primary shard: index "#{shard['index']}", shard "#{shard}", replica "#{replicaidx}"'
    end
  end
end

puts ' - reviewed allocations'


# update stack
# reduce our auto-scaling groups

puts ' + scaling down stack...'

# @todo lookup/update parameters

puts ' - scaled down stack'


# wait
# make sure the nodes are gone from the cluster

puts ' + elastic nodes are online...'

while true do
  sleep 10

  found = false

  req_nodes = elasticsearch.start do | http |
    http.get '/_cluster/nodes', { 'Content-Type' => 'application/json' }
  end

  nodes = JSON.parse(req_nodes.body)

  nodes['nodes'].each do | id, node |
    if elastic_nodes.has_key? id then
      found = true
    end
  end

  if not found then
    break
  end
end

puts ' - elastic nodes are offline'


# replication
# lower the number of replicas we want to maintain

puts ' + lowering replication requirements...'

elasticsearch.start do | http |
  http.post
    '/settings',
    JSON.generate({
      'index' => {
        'number_of_replicas' => replica_lower,
      },
    }),
    { 'Accept' => 'application/json' }
end

puts ' - lowered replication requirements'


# stability
# to be safe, make sure we're back to green

puts ' + cluster is not yet "green"...'

while true do
  sleep 10

  found = false

  req_health = elasticsearch.start do | http |
    http.get '/_cluster/health', { 'Content-Type' => 'application/json' }
  end

  health = JSON.parse(req_health.body)

  if 'green' == health['status'] then
    break
  end
end

puts ' - cluster is "green"'
